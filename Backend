from fastapi import FastAPI, UploadFile, File, Form, Depends
from fastapi.middleware.cors import CORSMiddleware
import json
import os
import uuid
import cloudinary
import cloudinary.uploader
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, String, DateTime, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
import datetime

load_dotenv()

# Configure Cloudinary
cloudinary.config(
    cloud_name=os.getenv("CLOUDINARY_CLOUD_NAME"),
    api_key=os.getenv("CLOUDINARY_API_KEY"),
    api_secret=os.getenv("CLOUDINARY_API_SECRET")
)

# Database setup with connection pooling
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./reports.db")
engine = create_engine(
    DATABASE_URL,
    pool_size=5,  # Number of connections to keep in pool
    max_overflow=10,  # Additional connections when pool is full
    pool_pre_ping=True,  # Test connections before use
    pool_recycle=3600,  # Recycle connections every hour
    echo=False  # Set to True for debugging SQL queries
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Database model
class Report(Base):
    __tablename__ = "reports"
    
    id = Column(String, primary_key=True)
    project_name = Column(String, nullable=False)
    photos = Column(Text)
    gps = Column(String, nullable=False)
    submitted_at = Column(DateTime, default=datetime.datetime.now)
    status = Column(String, default="Pending")

# Create tables
Base.metadata.create_all(bind=engine)

app = FastAPI()

# CORS setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Paths
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
UPLOAD_DIR = os.path.join(BASE_DIR, "uploads")
os.makedirs(UPLOAD_DIR, exist_ok=True)

# Database helper functions with dependency injection
def get_db():
    """Dependency to get database session"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/")
def root():
    return {"message": "FastAPI backend is running on Render"}

@app.get("/api/reports")
async def get_reports(db: Session = Depends(get_db)):
    reports = db.query(Report).all()
    result = []
    for report in reports:
        result.append({
            "id": report.id,
            "projectName": report.project_name,
            "photos": json.loads(report.photos) if report.photos else [],
            "gps": report.gps,
            "submittedAt": report.submitted_at.isoformat() if report.submitted_at else None,
            "status": report.status
        })
    return {"success": True, "reports": result}

@app.post("/api/reports")
async def upload_report(
    projectName: str = Form(...),
    gps: str = Form(...),
    submittedAt: str = Form(...),
    photos: list[UploadFile] = File(...),
    db: Session = Depends(get_db)
):
    print(f"Received report: {projectName}, GPS: {gps}")  # Debug log
    
    # Generate unique ID for report
    report_id = str(uuid.uuid4())

    # Upload photos to Cloudinary and collect permanent URLs
    photo_urls = []
    for photo in photos:
        try:
            file_content = await photo.read()
            
            upload_result = cloudinary.uploader.upload(
                file_content,
                public_id=f"bluecarbon/{report_id}_{photo.filename}",
                resource_type="auto"
            )
            
            permanent_url = upload_result['secure_url']
            photo_urls.append(permanent_url)
            print(f"Uploaded to Cloudinary: {permanent_url}")
            
        except Exception as e:
            print(f"Error uploading {photo.filename}: {str(e)}")
            # Fallback to local storage if Cloudinary fails
            filename = f"{report_id}_{photo.filename}"
            fallback_url = f"https://aquachain.onrender.com/uploads/{filename}"
            photo_urls.append(fallback_url)

    # Save to database
    try:
        print(f"Attempting to save report with ID: {report_id}")  # Debug log
        
        db_report = Report(
            id=report_id,
            project_name=projectName,
            photos=json.dumps(photo_urls),
            gps=gps,
            submitted_at=datetime.datetime.fromisoformat(submittedAt.replace('Z', '+00:00')) if submittedAt else datetime.datetime.now(),
            status="Pending"
        )
        
        db.add(db_report)
        db.commit()
        
        # Verify it was saved
        saved_report = db.query(Report).filter(Report.id == report_id).first()
        if saved_report:
            print(f"Report saved successfully: {saved_report.id}")
        else:
            print("Report not found after save!")
        
        return {"success": True, "id": report_id, "photo_urls": photo_urls}
        
    except Exception as e:
        print(f"Database error: {str(e)}")  # Debug log
        db.rollback()
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8000)
